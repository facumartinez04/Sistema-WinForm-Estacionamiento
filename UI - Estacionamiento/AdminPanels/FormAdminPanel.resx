<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>